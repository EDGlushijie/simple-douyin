// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: comment.sql

package mydb

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :execresult
INSERT INTO comments (
  comment_id, user_id, video_id, content
) VALUES (
  ?, ?, ?, ?
)
`

type CreateCommentParams struct {
	CommentID int64  `json:"comment_id"`
	UserID    int64  `json:"user_id"`
	VideoID   int64  `json:"video_id"`
	Content   string `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createComment,
		arg.CommentID,
		arg.UserID,
		arg.VideoID,
		arg.Content,
	)
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE comment_id = ?
`

func (q *Queries) DeleteComment(ctx context.Context, commentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, commentID)
	return err
}

const getComment = `-- name: GetComment :one
SELECT comment_id, user_id, video_id, content, created_at FROM comments
WHERE  comment_id = ? LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, commentID int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, commentID)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.UserID,
		&i.VideoID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getCommentsById = `-- name: GetCommentsById :many
SELECT comment_id, user_id, video_id, content, created_at FROM comments
WHERE  video_id = ?
ORDER BY created_at DESC
`

func (q *Queries) GetCommentsById(ctx context.Context, videoID int64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsById, videoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.CommentID,
			&i.UserID,
			&i.VideoID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listComments = `-- name: ListComments :many
SELECT comment_id, user_id, video_id, content, created_at FROM comments
WHERE created_at <= ?
ORDER BY created_at
`

func (q *Queries) ListComments(ctx context.Context, createdAt string) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listComments, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.CommentID,
			&i.UserID,
			&i.VideoID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const maxCommentID = `-- name: MaxCommentID :one
SELECT max(comment_id) FROM comments
`

func (q *Queries) MaxCommentID(ctx context.Context) (int64, error) {
	rows := q.db.QueryRowContext(ctx, maxCommentID)

	var id int64
	err := rows.Scan(&id)

	return id, err

}

const totalComment = `-- name: TotalComment :one
SELECT count(comment_id) FROM comments
WHERE video_id = ?
`

func (q *Queries) TotalComment(ctx context.Context, video_id int64) (int64, error) {
	rows := q.db.QueryRowContext(ctx, totalComment, video_id)

	var count int64
	err := rows.Scan(&count)

	return count, err
}
