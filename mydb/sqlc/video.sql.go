// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: video.sql

package mydb

import (
	"context"
	"database/sql"
)

const createVideo = `-- name: CreateVideo :execresult
INSERT INTO videos (
  author, play_url, cover_url, title
) VALUES (
  ?, ?, ?, ?
)
`

type CreateVideoParams struct {
	Author   int64  `json:"author"`
	PlayUrl  string `json:"play_url"`
	CoverUrl string `json:"cover_url"`
	Title    string `json:"title"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createVideo,
		arg.Author,
		arg.PlayUrl,
		arg.CoverUrl,
		arg.Title,
	)
}

const deleteVideo = `-- name: DeleteVideo :exec
DELETE FROM videos
WHERE video_id = ?
`

func (q *Queries) DeleteVideo(ctx context.Context, videoID int64) error {
	_, err := q.db.ExecContext(ctx, deleteVideo, videoID)
	return err
}

const getVideo = `-- name: GetVideo :one
SELECT video_id, author, play_url, cover_url, favorite_count, comment_count, title FROM videos
WHERE  video_id = ? LIMIT 1
`

func (q *Queries) GetVideo(ctx context.Context, videoID int64) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideo, videoID)
	var i Video
	err := row.Scan(
		&i.VideoID,
		&i.Author,
		&i.PlayUrl,
		&i.CoverUrl,
		&i.FavoriteCount,
		&i.CommentCount,
		&i.Title,
	)
	return i, err
}

const listVideos = `-- name: ListVideos :many
SELECT video_id, author, play_url, cover_url, favorite_count, comment_count, title FROM videos
ORDER BY video_id LIMIT 30
`

func (q *Queries) ListVideos(ctx context.Context) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, listVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.VideoID,
			&i.Author,
			&i.PlayUrl,
			&i.CoverUrl,
			&i.FavoriteCount,
			&i.CommentCount,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
