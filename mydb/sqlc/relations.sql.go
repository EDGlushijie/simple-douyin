// Code generated by sqlc. DO NOT EDIT.
// source: relations.sql

package mydb

import (
	"context"
)

const createRelation = `-- name: CreateRelation :exec
INSERT INTO relations (
  followed_id, follower_id
) VALUES (
  $1, $2
)
`

func (q *Queries) CreateRelation(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createRelation)
	return err
}

const getFollowedCount = `-- name: GetFollowedCount :one
SELECT deleted FROM relations
WHERE follower_id = $1
`

func (q *Queries) GetFollowedCount(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, getFollowedCount)
	var deleted int32
	err := row.Scan(&deleted)
	return deleted, err
}

const getFollowedIdByFollower = `-- name: GetFollowedIdByFollower :many
SELECT followed_id FROM relations
WHERE  follower_id = $1
AND deleted = 0
`

func (q *Queries) GetFollowedIdByFollower(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getFollowedIdByFollower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var followed_id int64
		if err := rows.Scan(&followed_id); err != nil {
			return nil, err
		}
		items = append(items, followed_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowerCount = `-- name: GetFollowerCount :one
SELECT count(*) FROM relations
WHERE followed_id = $1
`

func (q *Queries) GetFollowerCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFollowerCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFollowerIdByFollowed = `-- name: GetFollowerIdByFollowed :many
SELECT follower_id FROM relations
WHERE  followed_id = $1
AND deleted = 0
`

func (q *Queries) GetFollowerIdByFollowed(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getFollowerIdByFollowed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var follower_id int64
		if err := rows.Scan(&follower_id); err != nil {
			return nil, err
		}
		items = append(items, follower_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRelationByID = `-- name: GetRelationByID :one
SELECT deleted FROM relations
WHERE followed_id = $1
AND follower_id = $2
`

func (q *Queries) GetRelationByID(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, getRelationByID)
	var deleted int32
	err := row.Scan(&deleted)
	return deleted, err
}

const updateRelation = `-- name: UpdateRelation :exec
UPDATE relations SET deleted = $3
WHERE followed_id = $1
AND follower_id = $2
`

func (q *Queries) UpdateRelation(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateRelation)
	return err
}
