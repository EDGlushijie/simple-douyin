// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: favorite.sql

package mydb

import (
	"context"
)

const addFavorite = `-- name: AddFavorite :exec
INSERT INTO favorite (
    user_id, video_id, statement
) VALUES (
    ?, ?, 1
)
`

type AddFavoriteParams struct {
	UserID  int64 `json:"user_id"`
	VideoID int64 `json:"video_id"`
}

func (q *Queries) AddFavorite(ctx context.Context, arg AddFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, addFavorite, arg.UserID, arg.VideoID)
	return err
}

const addFavoriteCount = `-- name: AddFavoriteCount :exec
UPDATE videos SET favorite_count=favorite_count+1
WHERE video_id = ?
`

func (q *Queries) AddFavoriteCount(ctx context.Context, videoID int64) error {
	_, err := q.db.ExecContext(ctx, addFavoriteCount, videoID)
	return err
}

const delFavoriteCount = `-- name: DelFavoriteCount :exec
UPDATE videos SET favorite_count=favorite_count-1
WHERE video_id = ?
`

func (q *Queries) DelFavoriteCount(ctx context.Context, videoID int64) error {
	_, err := q.db.ExecContext(ctx, delFavoriteCount, videoID)
	return err
}

const deleteFavorite = `-- name: DeleteFavorite :exec
UPDATE favorite SET statement = 0
WHERE user_id = ? AND video_id = ?
`

type DeleteFavoriteParams struct {
	UserID  int64 `json:"user_id"`
	VideoID int64 `json:"video_id"`
}

func (q *Queries) DeleteFavorite(ctx context.Context, arg DeleteFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, deleteFavorite, arg.UserID, arg.VideoID)
	return err
}

const getInfo = `-- name: GetInfo :one
SELECT favorite_id, user_id, video_id, statement FROM favorite 
WHERE user_id = ? AND video_id = ?
`

type GetInfoParams struct {
	UserID  int64 `json:"user_id"`
	VideoID int64 `json:"video_id"`
}

func (q *Queries) GetInfo(ctx context.Context, arg GetInfoParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, getInfo, arg.UserID, arg.VideoID)
	var i Favorite
	err := row.Scan(
		&i.FavoriteID,
		&i.UserID,
		&i.VideoID,
		&i.Statement,
	)
	return i, err
}

const getUserLike = `-- name: GetUserLike :many
SELECT favorite_id, user_id, video_id, statement FROM favorite
WHERE user_id = ?
`

func (q *Queries) GetUserLike(ctx context.Context, userID int64) ([]Favorite, error) {
	rows, err := q.db.QueryContext(ctx, getUserLike, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(
			&i.FavoriteID,
			&i.UserID,
			&i.VideoID,
			&i.Statement,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFavorite = `-- name: UpdateFavorite :exec
UPDATE favorite SET statement = 1
WHERE user_id = ? AND video_id = ?
`

type UpdateFavoriteParams struct {
	UserID  int64 `json:"user_id"`
	VideoID int64 `json:"video_id"`
}

func (q *Queries) UpdateFavorite(ctx context.Context, arg UpdateFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, updateFavorite, arg.UserID, arg.VideoID)
	return err
}
